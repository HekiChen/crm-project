"""
Tests for product service.

Auto-generated by crud-generate CLI tool.
"""
import pytest
from decimal import Decimal
from sqlalchemy.ext.asyncio import AsyncSession
from uuid import uuid4

from app.models.product import Product
from app.schemas.product_schemas import ProductCreate, ProductUpdate
from app.services.product_service import ProductService


@pytest.mark.asyncio
class TestProductService:
    """Test suite for product service."""
    
    @pytest.fixture
    def product_service(self, db: AsyncSession) -> ProductService:
        """Create product service instance."""
        return ProductService(db)
    
    @pytest.fixture
    async def sample_product(self, db: AsyncSession) -> Product:
        """Create a sample product for testing."""
        product = Product(            name="name_value",            description="description_value",            price=Decimal("123.45"),            sku="sku_value",            category="category_value",            stock_quantity=123,            is_active=True,        )
        db.add(product)
        await db.commit()
        await db.refresh(product)
        return product
    
    async def test_create_product(
        self, product_service: ProductService, db: AsyncSession
    ):
        """Test creating a product."""
        create_data = ProductCreate(            name="name_value",            description="description_value",            price=Decimal("123.45"),            sku="sku_value",            category="category_value",            stock_quantity=123,            is_active=True,        )
        
        product = await product_service.create(create_data)
        
        assert product.id is not None        assert product.name == create_data.name        assert product.description == create_data.description        assert product.price == create_data.price        assert product.sku == create_data.sku        assert product.category == create_data.category        assert product.stock_quantity == create_data.stock_quantity        assert product.is_active == create_data.is_active        assert product.created_at is not None
        assert product.is_deleted is False
    
    async def test_get_by_id(
        self,
        product_service: ProductService,
        sample_product: Product,
    ):
        """Test getting product by ID."""
        product = await product_service.get_by_id(sample_product.id)
        
        assert product is not None
        assert product.id == sample_product.id        assert product.name == sample_product.name        assert product.description == sample_product.description        assert product.price == sample_product.price        assert product.sku == sample_product.sku        assert product.category == sample_product.category        assert product.stock_quantity == sample_product.stock_quantity        assert product.is_active == sample_product.is_active    
    async def test_get_by_id_not_found(self, product_service: ProductService):
        """Test getting non-existent product."""
        product = await product_service.get_by_id(uuid4())
        
        assert product is None
    
    async def test_get_list(
        self,
        product_service: ProductService,
        sample_product: Product,
    ):
        """Test getting paginated list of products."""
        products, total = await product_service.get_list(page=1, page_size=10)
        
        assert len(products) > 0
        assert total > 0
        assert products[0].id == sample_product.id
    
    async def test_get_list_pagination(
        self, product_service: ProductService, db: AsyncSession
    ):
        """Test pagination of products."""
        # Create multiple products
        for i in range(5):
            product = Product(                name=f"name_{i}",                description=f"description_{i}",                price=Decimal(f"{i}.99"),                sku=f"sku_{i}",                category=f"category_{i}",                stock_quantity=i,                is_active=bool(i % 2),            )
            db.add(product)
        await db.commit()
        
        # Get first page
        page1, total = await product_service.get_list(page=1, page_size=2)
        assert len(page1) == 2
        assert total >= 5
        
        # Get second page
        page2, _ = await product_service.get_list(page=2, page_size=2)
        assert len(page2) == 2
        assert page1[0].id != page2[0].id
    
    async def test_update_product(
        self,
        product_service: ProductService,
        sample_product: Product,
    ):
        """Test updating product."""
        update_data = ProductUpdate(            name="name_updated",            description="description_updated",        )
        
        updated_product = await product_service.update(
            sample_product.id, update_data
        )
        
        assert updated_product is not None        assert updated_product.name == update_data.name        assert updated_product.description == update_data.description        assert updated_product.updated_at > updated_product.created_at
    
    async def test_update_product_not_found(
        self, product_service: ProductService
    ):
        """Test updating non-existent product."""
        update_data = ProductUpdate(            name="name_updated",        )
        
        result = await product_service.update(uuid4(), update_data)
        
        assert result is None
    
    async def test_delete_product(
        self,
        product_service: ProductService,
        sample_product: Product,
    ):
        """Test soft deleting product."""
        success = await product_service.delete(sample_product.id)
        
        assert success is True
        
        # Verify it's soft deleted (not returned by default query)
        product = await product_service.get_by_id(sample_product.id)
        assert product is None
        
        # Verify it exists with include_deleted=True
        product = await product_service.get_by_id(
            sample_product.id, include_deleted=True
        )
        assert product is not None
        assert product.is_deleted is True
        assert product.deleted_at is not None
    
    async def test_delete_product_not_found(
        self, product_service: ProductService
    ):
        """Test deleting non-existent product."""
        success = await product_service.delete(uuid4())
        
        assert success is False