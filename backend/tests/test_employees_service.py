"""
Tests for employee service.

Auto-generated by crud-generate CLI tool.
"""
import pytest
from sqlalchemy.ext.asyncio import AsyncSession
from uuid import uuid4

from app.models.employee import Employee
from app.schemas.employee_schemas import EmployeeCreate, EmployeeUpdate
from app.services.employee_service import EmployeeService


@pytest.mark.asyncio
class TestEmployeeService:
    """Test suite for employee service."""
    
    @pytest.fixture
    def employee_service(self, db: AsyncSession) -> EmployeeService:
        """Create employee service instance."""
        return EmployeeService(db)
    
    @pytest.fixture
    async def sample_employee(self, db: AsyncSession) -> Employee:
        """Create a sample employee for testing."""
        employee = Employee(
            first_name="first_name_value",
            last_name="last_name_value",
            email="email_value",
        )
        db.add(employee)
        await db.commit()
        await db.refresh(employee)
        return employee
    
    async def test_create_employee(
        self, employee_service: EmployeeService, db: AsyncSession
    ):
        """Test creating a employee."""
        create_data = EmployeeCreate(
            first_name="first_name_value",
            last_name="last_name_value",
            email="email_value",
        )
        
        employee = await employee_service.create(create_data)
        
        assert employee.id is not None
        assert employee.first_name == create_data.first_name
        assert employee.last_name == create_data.last_name
        assert employee.email == create_data.email
        assert employee.created_at is not None
        assert employee.is_deleted is False
    
    async def test_get_by_id(
        self,
        employee_service: EmployeeService,
        sample_employee: Employee,
    ):
        """Test getting employee by ID."""
        employee = await employee_service.get_by_id(sample_employee.id)
        
        assert employee is not None
        assert employee.id == sample_employee.id
        assert employee.first_name == sample_employee.first_name
        assert employee.last_name == sample_employee.last_name
        assert employee.email == sample_employee.email
    
    async def test_get_by_id_not_found(self, employee_service: EmployeeService):
        """Test getting non-existent employee."""
        employee = await employee_service.get_by_id(uuid4())
        
        assert employee is None
    
    async def test_get_list(
        self,
        employee_service: EmployeeService,
        sample_employee: Employee,
    ):
        """Test getting paginated list of employees."""
        employees, total = await employee_service.get_list(page=1, page_size=10)
        
        assert len(employees) > 0
        assert total > 0
        assert employees[0].id == sample_employee.id
    
    async def test_get_list_pagination(
        self, employee_service: EmployeeService, db: AsyncSession
    ):
        """Test pagination of employees."""
        # Create multiple employees
        for i in range(5):
            employee = Employee(
                first_name=f"first_name_{i}",
                last_name=f"last_name_{i}",
                email=f"email_{i}",
            )
            db.add(employee)
        await db.commit()
        
        # Get first page
        page1, total = await employee_service.get_list(page=1, page_size=2)
        assert len(page1) == 2
        assert total >= 5
        
        # Get second page
        page2, _ = await employee_service.get_list(page=2, page_size=2)
        assert len(page2) == 2
        assert page1[0].id != page2[0].id
    
    async def test_update_employee(
        self,
        employee_service: EmployeeService,
        sample_employee: Employee,
    ):
        """Test updating employee."""
        update_data = EmployeeUpdate(
            first_name="first_name_updated",
            last_name="last_name_updated",
        )
        
        updated_employee = await employee_service.update(
            sample_employee.id, update_data
        )
        
        assert updated_employee is not None
        assert updated_employee.first_name == update_data.first_name
        assert updated_employee.last_name == update_data.last_name
        assert updated_employee.updated_at > updated_employee.created_at
    
    async def test_update_employee_not_found(
        self, employee_service: EmployeeService
    ):
        """Test updating non-existent employee."""
        update_data = EmployeeUpdate(
            first_name="first_name_updated",
        )
        
        result = await employee_service.update(uuid4(), update_data)
        
        assert result is None
    
    async def test_delete_employee(
        self,
        employee_service: EmployeeService,
        sample_employee: Employee,
    ):
        """Test soft deleting employee."""
        success = await employee_service.delete(sample_employee.id)
        
        assert success is True
        
        # Verify it's soft deleted (not returned by default query)
        employee = await employee_service.get_by_id(sample_employee.id)
        assert employee is None
        
        # Verify it exists with include_deleted=True
        employee = await employee_service.get_by_id(
            sample_employee.id, include_deleted=True
        )
        assert employee is not None
        assert employee.is_deleted is True
        assert employee.deleted_at is not None
    
    async def test_delete_employee_not_found(
        self, employee_service: EmployeeService
    ):
        """Test deleting non-existent employee."""
        success = await employee_service.delete(uuid4())
        
        assert success is False