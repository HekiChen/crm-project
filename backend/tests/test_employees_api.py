"""
Tests for employee API endpoints.

Auto-generated by crud-generate CLI tool.
"""
import pytest
from httpx import AsyncClient
from sqlalchemy.ext.asyncio import AsyncSession
from uuid import uuid4

from app.models.employee import Employee


@pytest.mark.asyncio
class TestEmployeeAPI:
    """Test suite for employee API endpoints."""
    
    @pytest.fixture
    async def sample_employee(self, db: AsyncSession) -> Employee:
        """Create a sample employee for testing."""
        employee = Employee(
            first_name="first_name_value",
            last_name="last_name_value",
            email="email_value",
        )
        db.add(employee)
        await db.commit()
        await db.refresh(employee)
        return employee
    
    async def test_create_employee(self, client: AsyncClient):
        """Test creating a new employee."""
        data = {
            "first_name": "first_name_value",
            "last_name": "last_name_value",
            "email": "email_value",
        }
        
        response = await client.post("/employees/", json=data)
        
        assert response.status_code == 201
        result = response.json()
        assert "id" in result
        assert result["first_name"] == data["first_name"]
        assert result["last_name"] == data["last_name"]
        assert result["email"] == data["email"]
        assert "created_at" in result
        assert "updated_at" in result
    
    async def test_get_employee_by_id(
        self, client: AsyncClient, sample_employee: Employee
    ):
        """Test getting a employee by ID."""
        response = await client.get(f"/employees/{sample_employee.id}")
        
        assert response.status_code == 200
        result = response.json()
        assert result["id"] == str(sample_employee.id)
        assert result["first_name"] == sample_employee.first_name
        assert result["last_name"] == sample_employee.last_name
        assert result["email"] == sample_employee.email
    
    async def test_get_employee_not_found(self, client: AsyncClient):
        """Test getting a non-existent employee."""
        fake_id = uuid4()
        response = await client.get(f"/employees/{fake_id}")
        
        assert response.status_code == 404
        assert "not found" in response.json()["detail"].lower()
    
    async def test_list_employees(
        self, client: AsyncClient, sample_employee: Employee
    ):
        """Test listing employees with pagination."""
        response = await client.get("/employees/", params={"page": 1, "page_size": 10})
        
        assert response.status_code == 200
        result = response.json()
        assert "data" in result
        assert "total" in result
        assert "page" in result
        assert "page_size" in result
        assert len(result["data"]) > 0
        assert result["data"][0]["id"] == str(sample_employee.id)
    
    async def test_list_employees_pagination(self, client: AsyncClient, db: AsyncSession):
        """Test employees pagination."""
        # Create multiple employees
        for i in range(5):
            employee = Employee(
                first_name=f"first_name_{i}",
                last_name=f"last_name_{i}",
                email=f"email_{i}",
            )
            db.add(employee)
        await db.commit()
        
        # Test first page
        response = await client.get("/employees/", params={"page": 1, "page_size": 2})
        assert response.status_code == 200
        result = response.json()
        assert len(result["data"]) == 2
        assert result["total"] >= 5
        assert result["has_next"] is True
        
        # Test second page
        response = await client.get("/employees/", params={"page": 2, "page_size": 2})
        assert response.status_code == 200
        result = response.json()
        assert len(result["data"]) == 2
    
    async def test_update_employee(
        self, client: AsyncClient, sample_employee: Employee
    ):
        """Test updating a employee."""
        update_data = {
            "first_name": "first_name_updated",
            "last_name": "last_name_updated",
        }
        
        response = await client.put(
            f"/employees/{sample_employee.id}",
            json=update_data
        )
        
        assert response.status_code == 200
        result = response.json()
        assert result["first_name"] == update_data["first_name"]
        assert result["last_name"] == update_data["last_name"]
        assert result["updated_at"] > result["created_at"]
    
    async def test_update_employee_not_found(self, client: AsyncClient):
        """Test updating a non-existent employee."""
        fake_id = uuid4()
        update_data = {
            "first_name": "first_name_updated",
        }
        
        response = await client.put(f"/employees/{fake_id}", json=update_data)
        
        assert response.status_code == 404
    
    async def test_delete_employee(
        self, client: AsyncClient, sample_employee: Employee
    ):
        """Test soft deleting a employee."""
        response = await client.delete(f"/employees/{sample_employee.id}")
        
        assert response.status_code == 200
        assert "deleted successfully" in response.json()["message"].lower()
        
        # Verify employee is soft deleted
        get_response = await client.get(f"/employees/{sample_employee.id}")
        assert get_response.status_code == 404
    
    async def test_delete_employee_not_found(self, client: AsyncClient):
        """Test deleting a non-existent employee."""
        fake_id = uuid4()
        response = await client.delete(f"/employees/{fake_id}")
        
        assert response.status_code == 404    
    async def test_create_employee_invalid_data(self, client: AsyncClient):
        """Test creating employee with invalid data."""
        data = {
            # Add invalid test data here
        }
        
        response = await client.post("/employees/", json=data)
        
        assert response.status_code == 422  # Validation error