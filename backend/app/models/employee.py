"""
employee model.

Auto-generated by crud-generate CLI tool.
"""
from typing import Optional, TYPE_CHECKING
from uuid import UUID

from sqlalchemy import String, Integer, Boolean, Date, DateTime, Text, Float, Numeric, ForeignKey
from sqlalchemy.orm import Mapped, mapped_column, relationship

from app.models.base import BaseModel
from app.models.crm.mixins import PersonMixin, ContactMixin, EmployeeMixin

if TYPE_CHECKING:
    from app.models.position import Position
    from app.models.department import Department
    from app.models.employee_role import EmployeeRole
    from app.models.work_log import WorkLog
    from app.models.export_job import ExportJob


class Employee(BaseModel, PersonMixin, ContactMixin, EmployeeMixin):
    """
    Employee model.
    
Represents employee entities in the system.    """
    __tablename__ = "employees"
    
    
    # first_name
    first_name: Mapped[str] = mapped_column(
        String(255), nullable=False,
        doc="The first_name field"    )
    
    # last_name
    last_name: Mapped[str] = mapped_column(
        String(255), nullable=False,
        doc="The last_name field"    )
    
    # email
    email: Mapped[str] = mapped_column(
        String(255), unique=True, nullable=False,
        doc="The email field"
    )
    
    # password_hash
    password_hash: Mapped[Optional[str]] = mapped_column(
        String(255),
        nullable=True,
        doc="Bcrypt-hashed password for authentication. NULL if employee doesn't have login access."
    )
    
    # is_active
    is_active: Mapped[bool] = mapped_column(
        Boolean,
        nullable=False,
        default=True,
        server_default="1",
        doc="Whether the employee account is active. Inactive employees cannot login."
    )
    
    # Relationships
    position: Mapped[Optional["Position"]] = relationship(
        "Position",
        back_populates="employees",
        foreign_keys="[Employee.position_id]",
        lazy="select",
        doc="The position/job role assigned to this employee"
    )
    
    department: Mapped[Optional["Department"]] = relationship(
        "Department",
        back_populates="employees",
        foreign_keys="[Employee.department_id]",
        lazy="select",
        doc="The department this employee belongs to"
    )
    
    # Self-referential manager relationship
    manager: Mapped[Optional["Employee"]] = relationship(
        "Employee",
        remote_side="[Employee.id]",
        back_populates="subordinates",
        foreign_keys="[Employee.manager_id]",
        lazy="select",
        doc="The manager of this employee"
    )
    
    subordinates: Mapped[list["Employee"]] = relationship(
        "Employee",
        back_populates="manager",
        foreign_keys="[Employee.manager_id]",
        lazy="select",
        doc="Employees managed by this employee"
    )
    
    # Role assignments (many-to-many via employee_roles)
    employee_roles: Mapped[list["EmployeeRole"]] = relationship(
        "EmployeeRole",
        back_populates="employee",
        cascade="all, delete-orphan",
        lazy="select",
        doc="Role assignments for this employee"
    )
    
    # Work logs
    work_logs: Mapped[list["WorkLog"]] = relationship(
        "WorkLog",
        back_populates="employee",
        foreign_keys="[WorkLog.employee_id]",
        cascade="all, delete-orphan",
        lazy="select",
        doc="Work logs created by this employee"
    )
    
    approved_work_logs: Mapped[list["WorkLog"]] = relationship(
        "WorkLog",
        back_populates="approver",
        foreign_keys="[WorkLog.approver_id]",
        lazy="select",
        doc="Work logs approved by this employee"
    )
    
    # Export jobs
    export_jobs: Mapped[list["ExportJob"]] = relationship(
        "ExportJob",
        back_populates="employee",
        cascade="all, delete-orphan",
        lazy="select",
        doc="Export jobs requested by this employee"
    )
    
    def __repr__(self) -> str:
        """String representation."""
        return f"<Employee(id={self.id}, first_name='{self.first_name}', last_name='{self.last_name}')>"