"""
employee API endpoints.

Auto-generated by crud-generate CLI tool.
"""
from typing import Any
from uuid import UUID

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.database import get_db
from app.models.employee import Employee
from app.schemas.employee_schemas import (
    EmployeeCreate,
    EmployeeUpdate,
    EmployeeResponse,
    EmployeeListResponse,
)
from app.schemas.base import IDResponse, MessageResponse, PaginationParams
from app.services.employee_service import EmployeeService


router = APIRouter(
    prefix="/employees",
    tags=["employees"],
)


def get_employee_service(db: AsyncSession = Depends(get_db)) -> EmployeeService:
    """
    Get employee service instance.
    
    Args:
        db: Database session
        
    Returns:
        EmployeeService instance
    """
    return EmployeeService(db)


@router.post(
    "/",
    response_model=EmployeeResponse,
    status_code=status.HTTP_201_CREATED,
    summary="Create employee",
    description="Create a new employee entity.",
)
async def create_employee(
    employee_in: EmployeeCreate,
    service: EmployeeService = Depends(get_employee_service),
) -> Any:
    """
    Create a new employee.
    
    Args:
        employee_in: employee creation data
        service: employee service
        
    Returns:
        Created employee
    """
    employee = await service.create(employee_in)
    return EmployeeResponse.model_validate(employee)


@router.get(
    "/{id}",
    response_model=EmployeeResponse,
    summary="Get employee by ID",
    description="Retrieve a single employee by its ID.",
)
async def get_employee(
    id: UUID,
    service: EmployeeService = Depends(get_employee_service),
) -> Any:
    """
    Get employee by ID.
    
    Args:
        id: employee ID
        service: employee service
        
    Returns:
        employee data
        
    Raises:
        HTTPException: 404 if employee not found
    """
    employee = await service.get_by_id(id)
    
    if not employee:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Employee not found",
        )
    
    return EmployeeResponse.model_validate(employee)


@router.get(
    "/",
    response_model=EmployeeListResponse,
    summary="List employees",
    description="Get a paginated list of employees.",
)
async def list_employees(
    pagination: PaginationParams = Depends(),
    service: EmployeeService = Depends(get_employee_service),
) -> Any:
    """
    Get paginated list of employees.
    
    Args:
        pagination: Pagination parameters
        service: employee service
        
    Returns:
        Paginated list of employees
    """
    # BaseService.get_list now returns ListResponseSchema directly
    return await service.get_list(pagination=pagination)


@router.put(
    "/{id}",
    response_model=EmployeeResponse,
    summary="Update employee",
    description="Update all fields of a employee.",
)
async def update_employee(
    id: UUID,
    employee_in: EmployeeUpdate,
    service: EmployeeService = Depends(get_employee_service),
) -> Any:
    """
    Update employee.
    
    Args:
        id: employee ID
        employee_in: employee update data
        service: employee service
        
    Returns:
        Updated employee
        
    Raises:
        HTTPException: 404 if employee not found
    """
    employee = await service.update(id, employee_in)
    
    if not employee:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Employee not found",
        )
    
    return EmployeeResponse.model_validate(employee)


@router.delete(
    "/{id}",
    response_model=MessageResponse,
    summary="Delete employee",
    description="Soft delete a employee.",
)
async def delete_employee(
    id: UUID,
    service: EmployeeService = Depends(get_employee_service),
) -> Any:
    """
    Soft delete employee.
    
    Args:
        id: employee ID
        service: employee service
        
    Returns:
        Success message
        
    Raises:
        HTTPException: 404 if employee not found
    """
    success = await service.delete(id)
    
    if not success:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Employee not found",
        )
    
    return MessageResponse(message="Employee deleted successfully")