"""
Tests for {{ entity_name }} API endpoints.

Auto-generated by crud-generate CLI tool.
"""
import pytest
from httpx import AsyncClient
from sqlalchemy.ext.asyncio import AsyncSession
from uuid import uuid4
{% if has_decimal_fields %}
from decimal import Decimal
{% endif %}

from app.models.{{ entity_name }} import {{ entity_class }}


@pytest.mark.asyncio
class Test{{ entity_class }}API:
    """Test suite for {{ entity_name }} API endpoints."""
    
    @pytest.fixture
    async def sample_{{ entity_name }}(self, db: AsyncSession) -> {{ entity_class }}:
        """Create a sample {{ entity_name }} for testing."""
        {{ entity_name }} = {{ entity_class }}(
            {% for field in fields %}
            {% if not field.is_nullable %}
            {{ field.name }}={{ field.sample_value }},
            {% endif %}
            {% endfor %}
        )
        db.add({{ entity_name }})
        await db.commit()
        await db.refresh({{ entity_name }})
        return {{ entity_name }}
    
    async def test_create_{{ entity_name }}(self, client: AsyncClient):
        """Test creating a new {{ entity_name }}."""
        data = {
            {% for field in fields %}
            {% if not field.is_nullable %}
            "{{ field.name }}": {{ field.sample_value }},
            {% endif %}
            {% endfor %}
        }
        
        response = await client.post("/{{ endpoint_prefix }}/", json=data)
        
        assert response.status_code == 201
        result = response.json()
        assert "id" in result
        {% for field in fields %}
        {% if not field.is_nullable %}
        assert result["{{ field.name }}"] == data["{{ field.name }}"]
        {% endif %}
        {% endfor %}
        assert "created_at" in result
        assert "updated_at" in result
    
    async def test_get_{{ entity_name }}_by_id(
        self, client: AsyncClient, sample_{{ entity_name }}: {{ entity_class }}
    ):
        """Test getting a {{ entity_name }} by ID."""
        response = await client.get(f"/{{ endpoint_prefix }}/{sample_{{ entity_name }}.id}")
        
        assert response.status_code == 200
        result = response.json()
        assert result["id"] == str(sample_{{ entity_name }}.id)
        {% for field in fields %}
        {% if not field.is_nullable %}
        assert result["{{ field.name }}"] == sample_{{ entity_name }}.{{ field.name }}
        {% endif %}
        {% endfor %}
    
    async def test_get_{{ entity_name }}_not_found(self, client: AsyncClient):
        """Test getting a non-existent {{ entity_name }}."""
        fake_id = uuid4()
        response = await client.get(f"/{{ endpoint_prefix }}/{fake_id}")
        
        assert response.status_code == 404
        assert "not found" in response.json()["detail"].lower()
    
    async def test_list_{{ endpoint_prefix }}(
        self, client: AsyncClient, sample_{{ entity_name }}: {{ entity_class }}
    ):
        """Test listing {{ endpoint_prefix }} with pagination."""
        response = await client.get("/{{ endpoint_prefix }}/", params={"page": 1, "page_size": 10})
        
        assert response.status_code == 200
        result = response.json()
        assert "data" in result
        assert "total" in result
        assert "page" in result
        assert "page_size" in result
        assert len(result["data"]) > 0
        assert result["data"][0]["id"] == str(sample_{{ entity_name }}.id)
    
    async def test_list_{{ endpoint_prefix }}_pagination(self, client: AsyncClient, db: AsyncSession):
        """Test {{ endpoint_prefix }} pagination."""
        # Create multiple {{ endpoint_prefix }}
        for i in range(5):
            {{ entity_name }} = {{ entity_class }}(
                {% for field in fields %}
                {% if not field.is_nullable %}
                {{ field.name }}={{ field.sample_value_pattern }},
                {% endif %}
                {% endfor %}
            )
            db.add({{ entity_name }})
        await db.commit()
        
        # Test first page
        response = await client.get("/{{ endpoint_prefix }}/", params={"page": 1, "page_size": 2})
        assert response.status_code == 200
        result = response.json()
        assert len(result["data"]) == 2
        assert result["total"] >= 5
        assert result["has_next"] is True
        
        # Test second page
        response = await client.get("/{{ endpoint_prefix }}/", params={"page": 2, "page_size": 2})
        assert response.status_code == 200
        result = response.json()
        assert len(result["data"]) == 2
    
    async def test_update_{{ entity_name }}(
        self, client: AsyncClient, sample_{{ entity_name }}: {{ entity_class }}
    ):
        """Test updating a {{ entity_name }}."""
        update_data = {
            {% for field in fields[:2] %}
            "{{ field.name }}": {{ field.updated_sample_value }},
            {% endfor %}
        }
        
        response = await client.put(
            f"/{{ endpoint_prefix }}/{sample_{{ entity_name }}.id}",
            json=update_data
        )
        
        assert response.status_code == 200
        result = response.json()
        {% for field in fields[:2] %}
        assert result["{{ field.name }}"] == update_data["{{ field.name }}"]
        {% endfor %}
        assert result["updated_at"] > result["created_at"]
    
    async def test_update_{{ entity_name }}_not_found(self, client: AsyncClient):
        """Test updating a non-existent {{ entity_name }}."""
        fake_id = uuid4()
        update_data = {
            {% for field in fields[:1] %}
            "{{ field.name }}": {{ field.updated_sample_value }},
            {% endfor %}
        }
        
        response = await client.put(f"/{{ endpoint_prefix }}/{fake_id}", json=update_data)
        
        assert response.status_code == 404
    
    async def test_delete_{{ entity_name }}(
        self, client: AsyncClient, sample_{{ entity_name }}: {{ entity_class }}
    ):
        """Test soft deleting a {{ entity_name }}."""
        response = await client.delete(f"/{{ endpoint_prefix }}/{sample_{{ entity_name }}.id}")
        
        assert response.status_code == 200
        assert "deleted successfully" in response.json()["message"].lower()
        
        # Verify {{ entity_name }} is soft deleted
        get_response = await client.get(f"/{{ endpoint_prefix }}/{sample_{{ entity_name }}.id}")
        assert get_response.status_code == 404
    
    async def test_delete_{{ entity_name }}_not_found(self, client: AsyncClient):
        """Test deleting a non-existent {{ entity_name }}."""
        fake_id = uuid4()
        response = await client.delete(f"/{{ endpoint_prefix }}/{fake_id}")
        
        assert response.status_code == 404
    
    {%- if validation_tests %}
    
    async def test_create_{{ entity_name }}_invalid_data(self, client: AsyncClient):
        """Test creating {{ entity_name }} with invalid data."""
        data = {
            # Add invalid test data here
        }
        
        response = await client.post("/{{ endpoint_prefix }}/", json=data)
        
        assert response.status_code == 422  # Validation error
    {%- endif %}
