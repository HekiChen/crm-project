"""
Tests for {{ entity_name }} service.

Auto-generated by crud-generate CLI tool.
"""
import pytest
from sqlalchemy.ext.asyncio import AsyncSession
from uuid import uuid4
{% if has_decimal_fields %}
from decimal import Decimal
{% endif %}

from app.models.{{ entity_name }} import {{ entity_class }}
from app.schemas.{{ entity_name }}_schemas import {{ entity_class }}Create, {{ entity_class }}Update
from app.services.{{ entity_name }}_service import {{ entity_class }}Service


@pytest.mark.asyncio
class Test{{ entity_class }}Service:
    """Test suite for {{ entity_name }} service."""
    
    @pytest.fixture
    def {{ entity_name }}_service(self, db: AsyncSession) -> {{ entity_class }}Service:
        """Create {{ entity_name }} service instance."""
        return {{ entity_class }}Service(db)
    
    @pytest.fixture
    async def sample_{{ entity_name }}(self, db: AsyncSession) -> {{ entity_class }}:
        """Create a sample {{ entity_name }} for testing."""
        {{ entity_name }} = {{ entity_class }}(
            {% for field in fields %}
            {% if not field.is_nullable %}
            {{ field.name }}={{ field.sample_value }},
            {% endif %}
            {% endfor %}
        )
        db.add({{ entity_name }})
        await db.commit()
        await db.refresh({{ entity_name }})
        return {{ entity_name }}
    
    async def test_create_{{ entity_name }}(
        self, {{ entity_name }}_service: {{ entity_class }}Service, db: AsyncSession
    ):
        """Test creating a {{ entity_name }}."""
        create_data = {{ entity_class }}Create(
            {% for field in fields %}
            {% if not field.is_nullable %}
            {{ field.name }}={{ field.sample_value }},
            {% endif %}
            {% endfor %}
        )
        
        {{ entity_name }} = await {{ entity_name }}_service.create(create_data)
        
        assert {{ entity_name }}.id is not None
        {% for field in fields %}
        {% if not field.is_nullable %}
        assert {{ entity_name }}.{{ field.name }} == create_data.{{ field.name }}
        {% endif %}
        {% endfor %}
        assert {{ entity_name }}.created_at is not None
        assert {{ entity_name }}.is_deleted is False
    
    async def test_get_by_id(
        self,
        {{ entity_name }}_service: {{ entity_class }}Service,
        sample_{{ entity_name }}: {{ entity_class }},
    ):
        """Test getting {{ entity_name }} by ID."""
        {{ entity_name }} = await {{ entity_name }}_service.get_by_id(sample_{{ entity_name }}.id)
        
        assert {{ entity_name }} is not None
        assert {{ entity_name }}.id == sample_{{ entity_name }}.id
        {% for field in fields %}
        {% if not field.is_nullable %}
        assert {{ entity_name }}.{{ field.name }} == sample_{{ entity_name }}.{{ field.name }}
        {% endif %}
        {% endfor %}
    
    async def test_get_by_id_not_found(self, {{ entity_name }}_service: {{ entity_class }}Service):
        """Test getting non-existent {{ entity_name }}."""
        {{ entity_name }} = await {{ entity_name }}_service.get_by_id(uuid4())
        
        assert {{ entity_name }} is None
    
    async def test_get_list(
        self,
        {{ entity_name }}_service: {{ entity_class }}Service,
        sample_{{ entity_name }}: {{ entity_class }},
    ):
        """Test getting paginated list of {{ endpoint_prefix }}."""
        {{ endpoint_prefix }}, total = await {{ entity_name }}_service.get_list(page=1, page_size=10)
        
        assert len({{ endpoint_prefix }}) > 0
        assert total > 0
        assert {{ endpoint_prefix }}[0].id == sample_{{ entity_name }}.id
    
    async def test_get_list_pagination(
        self, {{ entity_name }}_service: {{ entity_class }}Service, db: AsyncSession
    ):
        """Test pagination of {{ endpoint_prefix }}."""
        # Create multiple {{ endpoint_prefix }}
        for i in range(5):
            {{ entity_name }} = {{ entity_class }}(
                {% for field in fields %}
                {% if not field.is_nullable %}
                {{ field.name }}={{ field.sample_value_pattern }},
                {% endif %}
                {% endfor %}
            )
            db.add({{ entity_name }})
        await db.commit()
        
        # Get first page
        page1, total = await {{ entity_name }}_service.get_list(page=1, page_size=2)
        assert len(page1) == 2
        assert total >= 5
        
        # Get second page
        page2, _ = await {{ entity_name }}_service.get_list(page=2, page_size=2)
        assert len(page2) == 2
        assert page1[0].id != page2[0].id
    
    async def test_update_{{ entity_name }}(
        self,
        {{ entity_name }}_service: {{ entity_class }}Service,
        sample_{{ entity_name }}: {{ entity_class }},
    ):
        """Test updating {{ entity_name }}."""
        update_data = {{ entity_class }}Update(
            {% for field in fields[:2] %}
            {{ field.name }}={{ field.updated_sample_value }},
            {% endfor %}
        )
        
        updated_{{ entity_name }} = await {{ entity_name }}_service.update(
            sample_{{ entity_name }}.id, update_data
        )
        
        assert updated_{{ entity_name }} is not None
        {% for field in fields[:2] %}
        assert updated_{{ entity_name }}.{{ field.name }} == update_data.{{ field.name }}
        {% endfor %}
        assert updated_{{ entity_name }}.updated_at > updated_{{ entity_name }}.created_at
    
    async def test_update_{{ entity_name }}_not_found(
        self, {{ entity_name }}_service: {{ entity_class }}Service
    ):
        """Test updating non-existent {{ entity_name }}."""
        update_data = {{ entity_class }}Update(
            {% for field in fields[:1] %}
            {{ field.name }}={{ field.updated_sample_value }},
            {% endfor %}
        )
        
        result = await {{ entity_name }}_service.update(uuid4(), update_data)
        
        assert result is None
    
    async def test_delete_{{ entity_name }}(
        self,
        {{ entity_name }}_service: {{ entity_class }}Service,
        sample_{{ entity_name }}: {{ entity_class }},
    ):
        """Test soft deleting {{ entity_name }}."""
        success = await {{ entity_name }}_service.delete(sample_{{ entity_name }}.id)
        
        assert success is True
        
        # Verify it's soft deleted (not returned by default query)
        {{ entity_name }} = await {{ entity_name }}_service.get_by_id(sample_{{ entity_name }}.id)
        assert {{ entity_name }} is None
        
        # Verify it exists with include_deleted=True
        {{ entity_name }} = await {{ entity_name }}_service.get_by_id(
            sample_{{ entity_name }}.id, include_deleted=True
        )
        assert {{ entity_name }} is not None
        assert {{ entity_name }}.is_deleted is True
        assert {{ entity_name }}.deleted_at is not None
    
    async def test_delete_{{ entity_name }}_not_found(
        self, {{ entity_name }}_service: {{ entity_class }}Service
    ):
        """Test deleting non-existent {{ entity_name }}."""
        success = await {{ entity_name }}_service.delete(uuid4())
        
        assert success is False
