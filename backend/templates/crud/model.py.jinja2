"""
{{ entity_name }} model.

Auto-generated by crud-generate CLI tool.
"""
{% if has_decimal_fields %}
from decimal import Decimal
{% endif %}
from typing import Optional
from uuid import UUID

from sqlalchemy import String, Integer, Boolean, Date, DateTime, Text, Float, Numeric, ForeignKey
from sqlalchemy.orm import Mapped, mapped_column, relationship

from app.models.base import BaseModel
{% if use_custom_types %}
from app.models.crm.field_types import EmailType, PhoneNumberType, MoneyType
{% endif %}
{% if domain_mixins %}
from app.models.crm.mixins import {{ domain_mixins|join(', ') }}
{% endif %}


class {{ entity_class }}(BaseModel{% if domain_mixins %}, {{ domain_mixins|join(', ') }}{% endif %}):
    """
    {{ entity_class }} model.
    
    {% if description -%}
    {{ description }}
    {%- else -%}
    Represents {{ entity_name }} entities in the system.
    {%- endif %}
    """
    __tablename__ = "{{ table_name }}"
    
    {% for field in fields %}
    
    # {{ field.name }}
    {{ field.name }}: Mapped[{% if field.is_nullable %}Optional[{{ field.python_type }}]{% else %}{{ field.python_type }}{% endif %}] = mapped_column(
        {{ field.to_sqlalchemy_column() }}{% if field.doc %},
        doc="{{ field.doc }}"{% endif %}
    )
    {% endfor %}
    {% if relationships %}
    
    # Relationships
    {% for rel in relationships %}
    {{ rel.name }}: Mapped[{% if rel.is_list %}"List[{{ rel.target_class }}]"{% else %}"{{ rel.target_class }}"{% endif %}] = relationship(
        "{{ rel.target_class }}",
        back_populates="{{ rel.back_populates }}"{% if rel.foreign_keys %},
        foreign_keys=[{{ rel.foreign_keys }}]{% endif %}
    )
    {% endfor %}
    {% endif %}
    
    def __repr__(self) -> str:
        """String representation."""
        return f"<{{ entity_class }}(id={self.id}{% if repr_fields %}, {{ repr_fields }}{% endif %})>"
