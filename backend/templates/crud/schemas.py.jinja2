"""
{{ entity_name }} schemas.

Auto-generated by crud-generate CLI tool.
"""
from datetime import date, datetime
from decimal import Decimal
from typing import Optional
from uuid import UUID

from pydantic import Field, field_validator

from app.schemas.base import CreateSchema, UpdateSchema, ResponseSchema, ListResponseSchema


class {{ entity_class }}Create(CreateSchema):
    """
    Schema for creating a new {{ entity_name }}.
    
    Used in POST /{{ endpoint_prefix }} requests.
    """

    {% for field in fields %}
    {{ field.name }}: {% if field.is_nullable %}Optional[{{ field.python_type }}]{% else %}{{ field.python_type }}{% endif %} = Field({% if field.is_nullable %}default=None, {% endif %}description="{{ field.doc or 'The ' + field.name + ' field' }}")
{% endfor %}
    
    {% if has_validators %}
    
    # Add validators here
    # Example:
    # @field_validator('email')
    # @classmethod
    # def validate_email(cls, v: str) -> str:
    #     """Validate email format."""
    #     if not v or '@' not in v:
    #         raise ValueError('Invalid email format')
    #     return v.lower()
    {% endif %}


class {{ entity_class }}Update(UpdateSchema):
    """
    Schema for updating a {{ entity_name }}.
    
    All fields are optional for PATCH /{{ endpoint_prefix }}/{id} requests.
    """

    {% for field in fields %}
    {{ field.name }}: Optional[{{ field.python_type }}] = Field(default=None, description="{{ field.doc or 'The ' + field.name + ' field' }}")
{% endfor %}


class {{ entity_class }}Response(ResponseSchema):
    """
    Schema for {{ entity_name }} responses.
    
    Includes all fields including system-managed fields (id, timestamps, audit).
    Used in API responses for GET, POST, PUT, PATCH endpoints.
    """

    {% for field in fields %}
    {{ field.name }}: {% if field.is_nullable %}Optional[{{ field.python_type }}]{% else %}{{ field.python_type }}{% endif %} = Field({% if field.is_nullable %}default=None, {% endif %}description="{{ field.doc or 'The ' + field.name + ' field' }}")
{% endfor %}


class {{ entity_class }}ListResponse(ListResponseSchema[{{ entity_class }}Response]):
    """
    Schema for paginated {{ entity_name }} list responses.
    
    Used in GET /{{ endpoint_prefix }} responses.
    """
    pass
