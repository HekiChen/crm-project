"""
{{ entity_name }} API endpoints.

Auto-generated by crud-generate CLI tool.
"""
from typing import Any
from uuid import UUID

from fastapi import APIRouter, Depends, HTTPException, Query, status
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.database import get_db
from app.models.{{ entity_name }} import {{ entity_class }}
from app.schemas.{{ entity_name }}_schemas import (
    {{ entity_class }}Create,
    {{ entity_class }}Update,
    {{ entity_class }}Response,
    {{ entity_class }}ListResponse,
)
from app.schemas.base import IDResponse, MessageResponse, PaginationParams
from app.services.{{ entity_name }}_service import {{ entity_class }}Service


router = APIRouter(
    prefix="/{{ endpoint_prefix }}",
    tags=["{{ endpoint_prefix }}"],
)


def get_{{ entity_name }}_service(db: AsyncSession = Depends(get_db)) -> {{ entity_class }}Service:
    """
    Get {{ entity_name }} service instance.
    
    Args:
        db: Database session
        
    Returns:
        {{ entity_class }}Service instance
    """
    return {{ entity_class }}Service(db)


@router.post(
    "/",
    response_model={{ entity_class }}Response,
    status_code=status.HTTP_201_CREATED,
    summary="Create {{ entity_name }}",
    description="Create a new {{ entity_name }} entity.",
)
async def create_{{ entity_name }}(
    {{ entity_name }}_in: {{ entity_class }}Create,
    service: {{ entity_class }}Service = Depends(get_{{ entity_name }}_service),
) -> Any:
    """
    Create a new {{ entity_name }}.
    
    Args:
        {{ entity_name }}_in: {{ entity_name }} creation data
        service: {{ entity_name }} service
        
    Returns:
        Created {{ entity_name }}
    """
    {{ entity_name }} = await service.create({{ entity_name }}_in)
    return {{ entity_class }}Response.model_validate({{ entity_name }})


@router.get(
    "/{id}",
    response_model={{ entity_class }}Response,
    summary="Get {{ entity_name }} by ID",
    description="Retrieve a single {{ entity_name }} by its ID.",
)
async def get_{{ entity_name }}(
    id: UUID,
    service: {{ entity_class }}Service = Depends(get_{{ entity_name }}_service),
) -> Any:
    """
    Get {{ entity_name }} by ID.
    
    Args:
        id: {{ entity_name }} ID
        service: {{ entity_name }} service
        
    Returns:
        {{ entity_name }} data
        
    Raises:
        HTTPException: 404 if {{ entity_name }} not found
    """
    {{ entity_name }} = await service.get_by_id(id)
    
    if not {{ entity_name }}:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="{{ entity_class }} not found",
        )
    
    return {{ entity_class }}Response.model_validate({{ entity_name }})


@router.get(
    "/",
    response_model={{ entity_class }}ListResponse,
    summary="List {{ endpoint_prefix }}",
    description="Get a paginated list of {{ endpoint_prefix }}.",
)
async def list_{{ endpoint_prefix }}(
    pagination: PaginationParams = Depends(),
    service: {{ entity_class }}Service = Depends(get_{{ entity_name }}_service),
) -> Any:
    """
    Get paginated list of {{ endpoint_prefix }}.
    
    Args:
        pagination: Pagination parameters
        service: {{ entity_name }} service
        
    Returns:
        Paginated list of {{ endpoint_prefix }}
    """
    {{ endpoint_prefix }}, total = await service.get_list(
        page=pagination.page,
        page_size=pagination.page_size,
    )
    
    return {{ entity_class }}ListResponse.create(
        data=[{{ entity_class }}Response.model_validate(obj) for obj in {{ endpoint_prefix }}],
        total=total,
        page=pagination.page,
        page_size=pagination.page_size,
    )


@router.put(
    "/{id}",
    response_model={{ entity_class }}Response,
    summary="Update {{ entity_name }}",
    description="Update all fields of a {{ entity_name }}.",
)
async def update_{{ entity_name }}(
    id: UUID,
    {{ entity_name }}_in: {{ entity_class }}Update,
    service: {{ entity_class }}Service = Depends(get_{{ entity_name }}_service),
) -> Any:
    """
    Update {{ entity_name }}.
    
    Args:
        id: {{ entity_name }} ID
        {{ entity_name }}_in: {{ entity_name }} update data
        service: {{ entity_name }} service
        
    Returns:
        Updated {{ entity_name }}
        
    Raises:
        HTTPException: 404 if {{ entity_name }} not found
    """
    {{ entity_name }} = await service.update(id, {{ entity_name }}_in)
    
    if not {{ entity_name }}:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="{{ entity_class }} not found",
        )
    
    return {{ entity_class }}Response.model_validate({{ entity_name }})


@router.delete(
    "/{id}",
    response_model=MessageResponse,
    summary="Delete {{ entity_name }}",
    description="Soft delete a {{ entity_name }}.",
)
async def delete_{{ entity_name }}(
    id: UUID,
    service: {{ entity_class }}Service = Depends(get_{{ entity_name }}_service),
) -> Any:
    """
    Soft delete {{ entity_name }}.
    
    Args:
        id: {{ entity_name }} ID
        service: {{ entity_name }} service
        
    Returns:
        Success message
        
    Raises:
        HTTPException: 404 if {{ entity_name }} not found
    """
    success = await service.delete(id)
    
    if not success:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="{{ entity_class }} not found",
        )
    
    return MessageResponse(message="{{ entity_class }} deleted successfully")
