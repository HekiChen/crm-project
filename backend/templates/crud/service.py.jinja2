"""
{{ entity_name }} service.

Auto-generated by crud-generate CLI tool.
"""
from typing import List, Optional
from uuid import UUID

from sqlalchemy.ext.asyncio import AsyncSession

from app.models.{{ entity_name }} import {{ entity_class }}
from app.schemas.{{ entity_name }}_schemas import {{ entity_class }}Create, {{ entity_class }}Update, {{ entity_class }}Response
from app.services.base import BaseService


class {{ entity_class }}Service(BaseService[{{ entity_class }}, {{ entity_class }}Create, {{ entity_class }}Update, {{ entity_class }}Response]):
    """
    Service for {{ entity_name }} operations.
    
    Provides business logic and database operations for {{ entity_class }} entities.
    Inherits standard CRUD operations from BaseService.
    """
    
    def __init__(self, db: AsyncSession):
        """
        Initialize {{ entity_class }} service.
        
        Args:
            db: Database session
        """
        super().__init__({{ entity_class }}, db)
    
    # Add custom business logic methods here
    # Example:
    # async def get_by_custom_field(self, value: str) -> Optional[{{ entity_class }}]:
    #     """Get {{ entity_name }} by custom field."""
    #     stmt = select({{ entity_class }}).where({{ entity_class }}.custom_field == value)
    #     result = await self.db.execute(stmt)
    #     return result.scalar_one_or_none()
