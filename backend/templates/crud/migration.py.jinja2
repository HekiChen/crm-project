"""{{ migration_message }}

Revision ID: {{ revision_id }}
Revises: {{ down_revision }}
Create Date: {{ create_date }}

Auto-generated by crud-generate CLI tool.
"""
from alembic import op
import sqlalchemy as sa
{%- if use_custom_types %}
from app.models.crm.field_types import EmailType, PhoneNumberType, MoneyType
{%- endif %}


# revision identifiers, used by Alembic.
revision = '{{ revision_id }}'
down_revision = {{ down_revision }}
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Upgrade database schema."""
    op.create_table(
        '{{ table_name }}',
        # Primary key
        sa.Column('id', sa.UUID(), nullable=False),
        
        # Custom fields
        {%- for field in fields %}
        sa.Column(
            '{{ field.name }}',
            {% if field.sqlalchemy_type == 'String' -%}
            sa.String({{ field.length }}),
            {%- elif field.sqlalchemy_type == 'Numeric' -%}
            sa.Numeric({{ field.precision }}, {{ field.scale }}),
            {%- elif field.sqlalchemy_type in ['EmailType', 'PhoneNumberType', 'MoneyType'] -%}
            {{ field.sqlalchemy_type }}(),
            {%- else -%}
            sa.{{ field.sqlalchemy_type }}(),
            {%- endif %}
            nullable={{ 'True' if field.is_nullable else 'False' }},
        ),
        {%- endfor %}
        
        # Timestamp fields
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        
        {%- if soft_delete %}
        # Soft delete fields
        sa.Column('is_deleted', sa.Boolean(), nullable=False),
        sa.Column('deleted_at', sa.DateTime(), nullable=True),
        {%- endif %}
        
        {%- if audit %}
        # Audit fields
        sa.Column('created_by_id', sa.UUID(), nullable=True),
        sa.Column('updated_by_id', sa.UUID(), nullable=True),
        {%- endif %}
        
        # Primary key constraint
        sa.PrimaryKeyConstraint('id'),
        
        {%- if foreign_keys %}
        # Foreign key constraints
        {%- for fk in foreign_keys %}
        sa.ForeignKeyConstraint(['{{ fk.column }}'], ['{{ fk.target_table }}.id'], ),
        {%- endfor %}
        {%- endif %}
        
        {%- if unique_constraints %}
        # Unique constraints
        {%- for field in unique_constraints %}
        sa.UniqueConstraint('{{ field }}'),
        {%- endfor %}
        {%- endif %}
    )
    
    # Create indexes
    {%- if indexed_fields %}
    {%- for field in indexed_fields %}
    op.create_index(
        'ix_{{ table_name }}_{{ field }}',
        '{{ table_name }}',
        ['{{ field }}'],
        unique=False
    )
    {%- endfor %}
    {%- endif %}
    op.create_index('ix_{{ table_name }}_id', '{{ table_name }}', ['id'], unique=False)
    {%- if soft_delete %}
    op.create_index('ix_{{ table_name }}_is_deleted', '{{ table_name }}', ['is_deleted'], unique=False)
    {%- endif %}


def downgrade() -> None:
    """Downgrade database schema."""
    # Drop indexes
    {%- if indexed_fields %}
    {%- for field in indexed_fields %}
    op.drop_index('ix_{{ table_name }}_{{ field }}', table_name='{{ table_name }}')
    {%- endfor %}
    {%- endif %}
    {%- if soft_delete %}
    op.drop_index('ix_{{ table_name }}_is_deleted', table_name='{{ table_name }}')
    {%- endif %}
    op.drop_index('ix_{{ table_name }}_id', table_name='{{ table_name }}')
    
    # Drop table
    op.drop_table('{{ table_name }}')
